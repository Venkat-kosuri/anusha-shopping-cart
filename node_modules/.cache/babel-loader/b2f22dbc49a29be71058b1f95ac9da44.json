{"ast":null,"code":"/* eslint-disable import/no-anonymous-default-export */\nimport axios from \"axios\";\nimport { fork, put, takeLatest } from \"redux-saga/effects\";\nimport { dataActions } from \"../../actions\";\n\nfunction* fetchData() {\n  try {\n    const response = yield axios({\n      url: \"https://fakestoreapi.com/products\",\n      method: \"GET\"\n    });\n    yield put({\n      type: dataActions.FETCH_DATA_SUCCESS,\n      data: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: dataActions.FETCH_DATA_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchFetchData() {\n  yield takeLatest(dataActions.FETCH_DATA_REQUEST, fetchData);\n}\n\nexport default [fork(watchFetchData)];","map":{"version":3,"sources":["C:/Users/DELL/Downloads/anusha/src/state/config/saga/dataSaga/index.js"],"names":["axios","fork","put","takeLatest","dataActions","fetchData","response","url","method","type","FETCH_DATA_SUCCESS","data","error","FETCH_DATA_ERROR","watchFetchData","FETCH_DATA_REQUEST"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,UAAUC,SAAV,GAAsB;AACpB,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAC;AAC3BO,MAAAA,GAAG,EAAE,mCADsB;AAE3BC,MAAAA,MAAM,EAAE;AAFmB,KAAD,CAA5B;AAKA,UAAMN,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEL,WAAW,CAACM,kBADV;AAERC,MAAAA,IAAI,EAAEL,QAAQ,CAACK;AAFP,KAAD,CAAT;AAID,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,UAAMV,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEL,WAAW,CAACS,gBADV;AAERD,MAAAA,KAAK,EAAEA,KAAK,CAACD;AAFL,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,cAAV,GAA2B;AACzB,QAAMX,UAAU,CAACC,WAAW,CAACW,kBAAb,EAAiCV,SAAjC,CAAhB;AACD;;AAED,eAAe,CAACJ,IAAI,CAACa,cAAD,CAAL,CAAf","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport axios from \"axios\";\nimport { fork, put, takeLatest } from \"redux-saga/effects\";\nimport { dataActions } from \"../../actions\";\n\nfunction* fetchData() {\n  try {\n    const response = yield axios({\n      url: \"https://fakestoreapi.com/products\",\n      method: \"GET\",\n    });\n\n    yield put({\n      type: dataActions.FETCH_DATA_SUCCESS,\n      data: response.data,\n    });\n  } catch (error) {\n    yield put({\n      type: dataActions.FETCH_DATA_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* watchFetchData() {\n  yield takeLatest(dataActions.FETCH_DATA_REQUEST, fetchData);\n}\n\nexport default [fork(watchFetchData)];\n"]},"metadata":{},"sourceType":"module"}